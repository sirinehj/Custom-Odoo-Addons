<!--so first thing here we have syntax like-->
<!--
    <templates>
        this t could be the first templete of templetes and it has a name in t-name attribute
        remember to put the technical name of the model in odoo apps we can see it in the developer mode
        then the name of the template is like project_test_frontend.Exemple
        and the owl="1" is to use the owl framework in odoo
        <t t-name="model-templete/project-templete" owl="1">
            it like a content here
            <p>Text here</p>
            xml files in odoo can use bootstrap and fa-icons
            <button class="btn btn-primary">click me</button>
        </t>
    </templates>
    at the end we go to the js file generally the js and xml files here looks that they have 
    the same name so exemple.js and exemple.xml

    now we will create another component that will be the child of this component "project_test_frontend.Exemple"
    in another directory like static/src/components/child_exemple/child_exemple.xml and child_exemple.js
    and we will use it in this template
    first we will go to the child_exemple.js and we will make it as exemple.js without the register part
    then we will go to the child_exemple.xml and we will make it like the exemple.xml
-->
<templates>
  <t t-name="project_test_frontend.Exemple" owl="1">
    <p>Text here of exemple template</p>
    <button class="btn btn-primary">click me</button>
    <!--here we will include the child component and i will give it a prop named title
    but the title is a string type so it needs to have "" for the attribute syntax and '' for the value
    it will be like title="'string'"=> title="'Child Exemple Title'"-->
    <!-- make sure that the tag name will be the same class name will be the same also in the exemple.js
    at the part of static components = {Child1_Exemple};=> and that means in this xml we need to have
    <Child1_Exemple/> otherwise it won't show up-->
    <Child1_Exemple title="'Child Exemple Title'"/>
    <!-- now we will go back to the child_exemple.js to add the props -->
    <!--here i will add the new prop in the Child_Exemple component with a new title prop-->
    <!-- it looks like we can only use one child at a time so i will comment the first one -->
    <Child2_Exemple title="'Child Exemple List'" list="['Item 1', 'Item 2', 'Item 3']"/>
    <!--now go back to the child_exemple.xml to print out the list-->
    <!--now we will try the t-slot so t-slot it used to show information from the parent component
    in the child component-->
    <!--to do that i will create child3_exemple tag and component it will have the default slot-->
    <!--we need to add child3_exemple in exemple.js-->
    <!--now we can use the tag child3_exemple-->
    <Child3_Exemple title="'Child 3 Exemple default slot'">
      <!--inside the child3_exemple tag we will pass the information that we want-->
        <p>Content for Child 3 Exemple default slot from exemple</p>
      <!--now we go back to the child3_exemple.xml to add the default slot-->
    </Child3_Exemple>
    <!--for the t-set-slot we will use child4_exemple so let's create it-->
    <!--now we need to add child4_exemple in exemple.js-->
    <!--and add the slotschild4 in the exemple.js-->
    <Child4_Exemple title="'Child 4 Exemple'">
      <!--we will add the default slot, header, body and footer slots with t-set-slot-->
        <t t-set-slot="default">
          <div>Hello from slot exemple to child4</div>
        </t>
        <t t-set-slot="header">
          <header>Header content from exemple to child4</header>
        </t>
        <t t-set-slot="body">
          <section>Body content from exemple to child4</section>
        </t>
        <t t-set-slot="footer">
          <footer>Footer content from exemple to child4</footer>
        </t>

    </Child4_Exemple>
    <!--now i will create Child5_Exemple component that will have event effect-->
    <!-- so we need to initialise it first ... and imported to the exemple.js and here ...
    <Child5_Exemple/>
    -->
    <Child5_Exemple/>
    <!--now i will add child6 for life component cycle so i will alert msg on start and destroy case
    the rest are the same way-->
    <Child6_Exemple/>
    <!--now i will create another child7 to create a state management the objective is to pass the state
    from the parent exemple to the child7-->
    <!--event on click ofc for the func  countring in exemple.js-->
    <!--as a last step dont forget to add counter to child7
    counter="this.state.counter"-->
    <button class="btn btn-info" t-on-click="countring">Counter on click from exemple</button>
    <Child7_Exemple counter="this.state.counter"/>
    <!--ok for the ref i will do it in child8 and nothing is needed to be controlled by exemple i will 
    just create a field child8 here-->
    <Child8_Exemple/>
    <!--in child9 i will make the envirement concept 
    the envirement is used generally to pass infos from parent to childs
    that's why we need exemple.js to create the env and to call it out in child9.xml simply-->
    <!--so let's go to exemple.js-->
    <Child9_Exemple/>
    <!--so now we will talk about services first we need to create static/src/lib and import it in
    _manifest_.py in assest:{} with our web.assest_backend[]-->
    <!--services are made to load a function/logic(service) after we are inside the moduel in odoo if 
    we dont use useService() in any of our templates js file[exemple.js,child1.js,...]
    but if we use useService() in one of the templates js file it will run when we are in that level of 
    view ["inside the template.xml in odoo using interface as a user to test code...."]
    so to do that i will create 2 js files in static/src/services and import them in _manifest_.py 
    1 => my_general_service_exemple_for_project.js(general service) that will alert something
    2 => exemple_service.js to use it in child10.js so i need to create it-->
    <Child10_Exemple/>
    <!--i will create another child to use weather API
    its from:https://open-meteo.com/en/docs
    api:https://api.open-meteo.com/v1/forecast?latitude=52.52&longitude=13.41&hourly=temperature_2m
    its free one i will make a service of it my_weather_service.js-->
    <Child11_Exemple/>
    <!--we know that rpc is used to for backend-odoo api so to use public mehtods from odoo
    we can use the ORM service i will show it in child12-->
    <Child12_Exemple/>
    <!--the last thing is patch()/unpatch() and iheritate a template
    well as in the odoo tutorial said we can't patch everything but the concept is
    to override odoo moduels methods so for patch and unpatch i will try to create child13 that will 
    patch and unpatch a func in child 12-->
    <!--the func call patch_me and it only alert msg child13 will override the msg by button-->
    <Child13_Exemple/>
    <!--now child14 will inherit child13 template and override it-->
    <Child14_Exemple>
      <h3>child14</h3>
    </Child14_Exemple>
  </t>
</templates>